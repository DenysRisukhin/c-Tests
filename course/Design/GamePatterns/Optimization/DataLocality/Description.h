//
//  Usage.h
//  Test2019
//
//  Created by Risukhin Denys on 2/11/24.
//  Copyright © 2024 DenysRisukhin. All rights reserved.
//

#ifndef Usage_h
#define Usage_h

//Задача - ускорение доступа к памяти с помощью более удобного для кэширования процессором размещения данных.

//Современные процессоры обладают кэшем для ускорения доступа к памяти. Доступ к памяти,находящейся рядом с той, к которой мы только что обращались - значительно быстрее. Используйте это свойство для ускорения работы с помощью увеличения локальности данных - размещение данных в памяти последовательно, в порядке их обработки.

// usage
// стоит удостовериться что проблема с производительностью вызвана именно кэш-промахами. Если код тормозит по другой причине - шаблон не поможет.

//cache hit - Удачное нахождение порции данных в кэше называется попаданием в кэш
//cache miss - Если их там найти не удается и нужно обращаться к основной памяти

//В C++ использование интерфейсов включает в себя доступ к объектам через указатели или ссылки. Но переход по указателю означает прыжок в памяти, что в свою очередь приводит к кэш-промаху, которые этот шаблон призывает избегать.
//Вторая часть интерфейса - это виртуальный вызов методов. Это требует от
//процессора заглядывать в виртуальную таблицу и искать там указатель на настоящий вызываемый метод. И опять мы сталкиваемся с указателем, что приводит к кэш-промахам.
//Для того чтобы применить этот шаблон, нужно пожертвовать частью абстракции. Чем больше вы будете подчинять свою архитектуру локальности данных, тем больше вам придется пожертвовать наследованием и интерфейсами и предоставляемым ими удобством. Это разумный обмен. И в этом и заключается весь интерес!

#endif /* Usage_h */
